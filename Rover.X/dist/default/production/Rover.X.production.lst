

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Nov  9 19:09:48 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15  0000                     
    16                           ; Version 2.10
    17                           ; Generated 31/07/2019 GMT
    18                           ; 
    19                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4550 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     _TRISD	set	3989
    51  0000                     _TRISB	set	3987
    52  0000                     _OSCCON	set	4051
    53  0000                     _RB5	set	31757
    54  0000                     _RB3	set	31755
    55  0000                     _RB4	set	31756
    56  0000                     _RB2	set	31754
    57  0000                     _RB0	set	31752
    58  0000                     _RB1	set	31753
    59  0000                     _RD1	set	31769
    60  0000                     _RD0	set	31768
    61                           
    62                           ; #config settings
    63  0000                     
    64                           	psect	cinit
    65  007BCA                     __pcinit:
    66                           	opt callstack 0
    67  007BCA                     start_initialization:
    68                           	opt callstack 0
    69  007BCA                     __initialization:
    70                           	opt callstack 0
    71                           
    72                           ; Clear objects allocated to COMRAM (4 bytes)
    73  007BCA  6A0F               	clrf	(__pbssCOMRAM+3)& (0+255),c
    74  007BCC  6A0E               	clrf	(__pbssCOMRAM+2)& (0+255),c
    75  007BCE  6A0D               	clrf	(__pbssCOMRAM+1)& (0+255),c
    76  007BD0  6A0C               	clrf	__pbssCOMRAM& (0+255),c
    77  007BD2                     end_of_initialization:
    78                           	opt callstack 0
    79  007BD2                     __end_of__initialization:
    80                           	opt callstack 0
    81  007BD2  0100               	movlb	0
    82  007BD4  EFEC  F03D         	goto	_main	;jump to C main() function
    83                           
    84                           	psect	bssCOMRAM
    85  00000C                     __pbssCOMRAM:
    86                           	opt callstack 0
    87  00000C                     _xb:
    88                           	opt callstack 0
    89  00000C                     	ds	2
    90  00000E                     _xa:
    91                           	opt callstack 0
    92  00000E                     	ds	2
    93                           
    94                           	psect	cstackCOMRAM
    95  000001                     __pcstackCOMRAM:
    96                           	opt callstack 0
    97  000001                     ??_Forward:
    98  000001                     ??_Backwards:
    99  000001                     ??_Right:
   100  000001                     ??_Left:
   101  000001                     
   102                           ; 1 bytes @ 0x0
   103  000001                     	ds	3
   104  000004                     Forward@initial_xa:
   105                           	opt callstack 0
   106  000004                     Backwards@initial_xa:
   107                           	opt callstack 0
   108  000004                     Right@initial_xa:
   109                           	opt callstack 0
   110  000004                     Left@initial_xa:
   111                           	opt callstack 0
   112                           
   113                           ; 2 bytes @ 0x3
   114  000004                     	ds	2
   115  000006                     Forward@initial_xb:
   116                           	opt callstack 0
   117  000006                     Backwards@initial_xb:
   118                           	opt callstack 0
   119  000006                     Right@initial_xb:
   120                           	opt callstack 0
   121  000006                     Left@initial_xb:
   122                           	opt callstack 0
   123                           
   124                           ; 2 bytes @ 0x5
   125  000006                     	ds	2
   126  000008                     Forward@done:
   127                           	opt callstack 0
   128  000008                     Backwards@done:
   129                           	opt callstack 0
   130  000008                     Right@done:
   131                           	opt callstack 0
   132  000008                     Left@done:
   133                           	opt callstack 0
   134                           
   135                           ; 1 bytes @ 0x7
   136  000008                     	ds	1
   137  000009                     Forward@S1A_old:
   138                           	opt callstack 0
   139  000009                     Backwards@S1A_old:
   140                           	opt callstack 0
   141  000009                     Right@S1A_old:
   142                           	opt callstack 0
   143  000009                     Left@S1A_old:
   144                           	opt callstack 0
   145                           
   146                           ; 1 bytes @ 0x8
   147  000009                     	ds	1
   148  00000A                     Forward@S1B_old:
   149                           	opt callstack 0
   150  00000A                     Backwards@S1B_old:
   151                           	opt callstack 0
   152  00000A                     Right@S1B_old:
   153                           	opt callstack 0
   154  00000A                     Left@S1B_old:
   155                           	opt callstack 0
   156                           
   157                           ; 1 bytes @ 0x9
   158  00000A                     	ds	1
   159  00000B                     Forward@chords:
   160                           	opt callstack 0
   161  00000B                     Backwards@chords:
   162                           	opt callstack 0
   163  00000B                     Right@chords:
   164                           	opt callstack 0
   165  00000B                     Left@chords:
   166                           	opt callstack 0
   167                           
   168                           ; 1 bytes @ 0xA
   169  00000B                     	ds	1
   170  00000C                     
   171                           ; 1 bytes @ 0xB
   172 ;;
   173 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   174 ;;
   175 ;; *************** function _main *****************
   176 ;; Defined at:
   177 ;;		line 25 in file "main.c"
   178 ;; Parameters:    Size  Location     Type
   179 ;;		None
   180 ;; Auto vars:     Size  Location     Type
   181 ;;		None
   182 ;; Return value:  Size  Location     Type
   183 ;;                  1    wreg      void 
   184 ;; Registers used:
   185 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   186 ;; Tracked objects:
   187 ;;		On entry : 0/0
   188 ;;		On exit  : 0/0
   189 ;;		Unchanged: 0/0
   190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   191 ;;      Params:         0       0       0       0       0       0       0       0       0
   192 ;;      Locals:         0       0       0       0       0       0       0       0       0
   193 ;;      Temps:          0       0       0       0       0       0       0       0       0
   194 ;;      Totals:         0       0       0       0       0       0       0       0       0
   195 ;;Total ram usage:        0 bytes
   196 ;; Hardware stack levels required when called:    1
   197 ;; This function calls:
   198 ;;		_Backwards
   199 ;;		_Forward
   200 ;;		_Left
   201 ;;		_Right
   202 ;; This function is called by:
   203 ;;		Startup code after reset
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207                           	psect	text0
   208  007BD8                     __ptext0:
   209                           	opt callstack 0
   210  007BD8                     _main:
   211                           	opt callstack 30
   212  007BD8                     
   213                           ;main.c: 27:     OSCCON=0x72;
   214  007BD8  0E72               	movlw	114
   215  007BDA  6ED3               	movwf	211,c	;volatile
   216                           
   217                           ;main.c: 28:     TRISB=0x00;
   218  007BDC  0E00               	movlw	0
   219  007BDE  6E93               	movwf	147,c	;volatile
   220                           
   221                           ;main.c: 29:     TRISD=0x03;
   222  007BE0  0E03               	movlw	3
   223  007BE2  6E95               	movwf	149,c	;volatile
   224  007BE4                     
   225                           ;main.c: 31:     Forward(1);
   226  007BE4  0E01               	movlw	1
   227  007BE6  EC80  F03E         	call	_Forward
   228  007BEA                     
   229                           ;main.c: 32:     Backwards(1);
   230  007BEA  0E01               	movlw	1
   231  007BEC  EC00  F03E         	call	_Backwards
   232  007BF0                     
   233                           ;main.c: 33:     Right(1);
   234  007BF0  0E01               	movlw	1
   235  007BF2  EC80  F03F         	call	_Right
   236  007BF6                     
   237                           ;main.c: 34:     Left(1);
   238  007BF6  0E01               	movlw	1
   239  007BF8  EC00  F03F         	call	_Left
   240  007BFC  EF00  F000         	goto	start
   241  007C00                     __end_of_main:
   242                           	opt callstack 0
   243                           
   244 ;; *************** function _Right *****************
   245 ;; Defined at:
   246 ;;		line 150 in file "main.c"
   247 ;; Parameters:    Size  Location     Type
   248 ;;  chords          1    wreg     unsigned char 
   249 ;; Auto vars:     Size  Location     Type
   250 ;;  chords          1   10[COMRAM] unsigned char 
   251 ;;  initial_xb      2    5[COMRAM] int 
   252 ;;  initial_xa      2    3[COMRAM] int 
   253 ;;  S1B_old         1    9[COMRAM] unsigned char 
   254 ;;  S1A_old         1    8[COMRAM] unsigned char 
   255 ;;  done            1    7[COMRAM] unsigned char 
   256 ;; Return value:  Size  Location     Type
   257 ;;                  1    wreg      void 
   258 ;; Registers used:
   259 ;;		wreg, status,2, status,0, prodl, prodh
   260 ;; Tracked objects:
   261 ;;		On entry : 0/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   265 ;;      Params:         0       0       0       0       0       0       0       0       0
   266 ;;      Locals:         8       0       0       0       0       0       0       0       0
   267 ;;      Temps:          3       0       0       0       0       0       0       0       0
   268 ;;      Totals:        11       0       0       0       0       0       0       0       0
   269 ;;Total ram usage:       11 bytes
   270 ;; Hardware stack levels used:    1
   271 ;; This function calls:
   272 ;;		Nothing
   273 ;; This function is called by:
   274 ;;		_main
   275 ;; This function uses a non-reentrant model
   276 ;;
   277                           
   278                           	psect	text1
   279  007F00                     __ptext1:
   280                           	opt callstack 0
   281  007F00                     _Right:
   282                           	opt callstack 30
   283                           
   284                           ;incstack = 0
   285                           ;Right@chords stored from wreg
   286  007F00  6E0B               	movwf	Right@chords^0,c
   287  007F02                     
   288                           ;main.c: 152:     bool done = 0;
   289  007F02  0E00               	movlw	0
   290  007F04  6E08               	movwf	Right@done^0,c
   291  007F06                     
   292                           ;main.c: 153:     bool S1A_old = RD0;
   293  007F06  0E00               	movlw	0
   294  007F08  B083               	btfsc	3971,0,c	;volatile
   295  007F0A  0E01               	movlw	1
   296  007F0C  6E09               	movwf	Right@S1A_old^0,c
   297  007F0E                     
   298                           ;main.c: 154:     bool S1B_old = RD1;
   299  007F0E  0E00               	movlw	0
   300  007F10  B283               	btfsc	3971,1,c	;volatile
   301  007F12  0E01               	movlw	1
   302  007F14  6E0A               	movwf	Right@S1B_old^0,c
   303  007F16                     
   304                           ;main.c: 156:     int initial_xa = xa;
   305  007F16  C00E  F004         	movff	_xa,Right@initial_xa
   306  007F1A  C00F  F005         	movff	_xa+1,Right@initial_xa+1
   307  007F1E                     
   308                           ;main.c: 157:     int initial_xb = xb;
   309  007F1E  C00C  F006         	movff	_xb,Right@initial_xb
   310  007F22  C00D  F007         	movff	_xb+1,Right@initial_xb+1
   311  007F26                     
   312                           ;main.c: 159:     RB1 = 1;
   313  007F26  8281               	bsf	3969,1,c	;volatile
   314  007F28                     
   315                           ;main.c: 160:     RB0 = 1;
   316  007F28  8081               	bsf	3969,0,c	;volatile
   317  007F2A                     
   318                           ;main.c: 161:     RB2 = 0;
   319  007F2A  9481               	bcf	3969,2,c	;volatile
   320  007F2C                     
   321                           ;main.c: 163:     RB4 = 1;
   322  007F2C  8881               	bsf	3969,4,c	;volatile
   323  007F2E                     
   324                           ;main.c: 164:     RB3 = 0;
   325  007F2E  9681               	bcf	3969,3,c	;volatile
   326  007F30                     
   327                           ;main.c: 165:     RB5 = 1;
   328  007F30  8A81               	bsf	3969,5,c	;volatile
   329                           
   330                           ;main.c: 167:     while (!done) {
   331  007F32  EFF1  F03F         	goto	l72
   332  007F36                     l869:
   333                           
   334                           ;main.c: 170:         if (RD0 != S1A_old){
   335  007F36  0E00               	movlw	0
   336  007F38  B083               	btfsc	3971,0,c	;volatile
   337  007F3A  0E01               	movlw	1
   338  007F3C  1809               	xorwf	Right@S1A_old^0,w,c
   339  007F3E  B4D8               	btfsc	status,2,c
   340  007F40  EFA4  F03F         	goto	u111
   341  007F44  EFA6  F03F         	goto	u110
   342  007F48                     u111:
   343  007F48  EFAC  F03F         	goto	l875
   344  007F4C                     u110:
   345  007F4C                     
   346                           ;main.c: 171:             xa++;
   347  007F4C  4A0E               	infsnz	_xa^0,f,c
   348  007F4E  2A0F               	incf	(_xa+1)^0,f,c
   349  007F50                     
   350                           ;main.c: 172:             S1A_old = RD0;
   351  007F50  0E00               	movlw	0
   352  007F52  B083               	btfsc	3971,0,c	;volatile
   353  007F54  0E01               	movlw	1
   354  007F56  6E09               	movwf	Right@S1A_old^0,c
   355  007F58                     l875:
   356                           
   357                           ;main.c: 175:         if (RD1 != S1B_old){
   358  007F58  0E00               	movlw	0
   359  007F5A  B283               	btfsc	3971,1,c	;volatile
   360  007F5C  0E01               	movlw	1
   361  007F5E  180A               	xorwf	Right@S1B_old^0,w,c
   362  007F60  B4D8               	btfsc	status,2,c
   363  007F62  EFB5  F03F         	goto	u121
   364  007F66  EFB7  F03F         	goto	u120
   365  007F6A                     u121:
   366  007F6A  EFBD  F03F         	goto	l881
   367  007F6E                     u120:
   368  007F6E                     
   369                           ;main.c: 176:             xb++;
   370  007F6E  4A0C               	infsnz	_xb^0,f,c
   371  007F70  2A0D               	incf	(_xb+1)^0,f,c
   372  007F72                     
   373                           ;main.c: 177:             S1B_old = RD1;
   374  007F72  0E00               	movlw	0
   375  007F74  B283               	btfsc	3971,1,c	;volatile
   376  007F76  0E01               	movlw	1
   377  007F78  6E0A               	movwf	Right@S1B_old^0,c
   378  007F7A                     l881:
   379                           
   380                           ;main.c: 181:         if (xa >= initial_xa + chords * 211 || xb >= initial_xb + chords *
      +                           211){
   381  007F7A  500B               	movf	Right@chords^0,w,c
   382  007F7C  0DD3               	mullw	211
   383  007F7E  CFF3 F001          	movff	prodl,??_Right
   384  007F82  CFF4 F002          	movff	prodh,??_Right+1
   385  007F86  5004               	movf	Right@initial_xa^0,w,c
   386  007F88  2601               	addwf	??_Right^0,f,c
   387  007F8A  5005               	movf	(Right@initial_xa+1)^0,w,c
   388  007F8C  2202               	addwfc	(??_Right+1)^0,f,c
   389  007F8E  5001               	movf	??_Right^0,w,c
   390  007F90  5C0E               	subwf	_xa^0,w,c
   391  007F92  500F               	movf	(_xa+1)^0,w,c
   392  007F94  0A80               	xorlw	128
   393  007F96  6E03               	movwf	(??_Right+2)^0,c
   394  007F98  5002               	movf	(??_Right+1)^0,w,c
   395  007F9A  0A80               	xorlw	128
   396  007F9C  5803               	subwfb	(??_Right+2)^0,w,c
   397  007F9E  B0D8               	btfsc	status,0,c
   398  007FA0  EFD4  F03F         	goto	u131
   399  007FA4  EFD6  F03F         	goto	u130
   400  007FA8                     u131:
   401  007FA8  EFEF  F03F         	goto	l885
   402  007FAC                     u130:
   403  007FAC  500B               	movf	Right@chords^0,w,c
   404  007FAE  0DD3               	mullw	211
   405  007FB0  CFF3 F001          	movff	prodl,??_Right
   406  007FB4  CFF4 F002          	movff	prodh,??_Right+1
   407  007FB8  5006               	movf	Right@initial_xb^0,w,c
   408  007FBA  2601               	addwf	??_Right^0,f,c
   409  007FBC  5007               	movf	(Right@initial_xb+1)^0,w,c
   410  007FBE  2202               	addwfc	(??_Right+1)^0,f,c
   411  007FC0  5001               	movf	??_Right^0,w,c
   412  007FC2  5C0C               	subwf	_xb^0,w,c
   413  007FC4  500D               	movf	(_xb+1)^0,w,c
   414  007FC6  0A80               	xorlw	128
   415  007FC8  6E03               	movwf	(??_Right+2)^0,c
   416  007FCA  5002               	movf	(??_Right+1)^0,w,c
   417  007FCC  0A80               	xorlw	128
   418  007FCE  5803               	subwfb	(??_Right+2)^0,w,c
   419  007FD0  A0D8               	btfss	status,0,c
   420  007FD2  EFED  F03F         	goto	u141
   421  007FD6  EFEF  F03F         	goto	u140
   422  007FDA                     u141:
   423  007FDA  EFF1  F03F         	goto	l72
   424  007FDE                     u140:
   425  007FDE                     l885:
   426                           
   427                           ;main.c: 182:             done = 1;
   428  007FDE  0E01               	movlw	1
   429  007FE0  6E08               	movwf	Right@done^0,c
   430  007FE2                     l72:
   431                           
   432                           ;main.c: 167:     while (!done) {
   433  007FE2  5008               	movf	Right@done^0,w,c
   434  007FE4  B4D8               	btfsc	status,2,c
   435  007FE6  EFF7  F03F         	goto	u151
   436  007FEA  EFF9  F03F         	goto	u150
   437  007FEE                     u151:
   438  007FEE  EF9B  F03F         	goto	l869
   439  007FF2                     u150:
   440  007FF2                     
   441                           ;main.c: 188:     RB1 = 1;
   442  007FF2  8281               	bsf	3969,1,c	;volatile
   443                           
   444                           ;main.c: 189:     RB0 = 0;
   445  007FF4  9081               	bcf	3969,0,c	;volatile
   446                           
   447                           ;main.c: 190:     RB2 = 0;
   448  007FF6  9481               	bcf	3969,2,c	;volatile
   449                           
   450                           ;main.c: 192:     RB4 = 1;
   451  007FF8  8881               	bsf	3969,4,c	;volatile
   452                           
   453                           ;main.c: 193:     RB3 = 0;
   454  007FFA  9681               	bcf	3969,3,c	;volatile
   455                           
   456                           ;main.c: 194:     RB5 = 0;
   457  007FFC  9A81               	bcf	3969,5,c	;volatile
   458  007FFE  0012               	return		;funcret
   459  008000                     __end_of_Right:
   460                           	opt callstack 0
   461                           
   462 ;; *************** function _Left *****************
   463 ;; Defined at:
   464 ;;		line 197 in file "main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;  chords          1    wreg     unsigned char 
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  chords          1   10[COMRAM] unsigned char 
   469 ;;  initial_xb      2    5[COMRAM] int 
   470 ;;  initial_xa      2    3[COMRAM] int 
   471 ;;  S1B_old         1    9[COMRAM] unsigned char 
   472 ;;  S1A_old         1    8[COMRAM] unsigned char 
   473 ;;  done            1    7[COMRAM] unsigned char 
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		wreg, status,2, status,0, prodl, prodh
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   483 ;;      Params:         0       0       0       0       0       0       0       0       0
   484 ;;      Locals:         8       0       0       0       0       0       0       0       0
   485 ;;      Temps:          3       0       0       0       0       0       0       0       0
   486 ;;      Totals:        11       0       0       0       0       0       0       0       0
   487 ;;Total ram usage:       11 bytes
   488 ;; Hardware stack levels used:    1
   489 ;; This function calls:
   490 ;;		Nothing
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text2
   497  007E00                     __ptext2:
   498                           	opt callstack 0
   499  007E00                     _Left:
   500                           	opt callstack 30
   501                           
   502                           ;incstack = 0
   503                           ;Left@chords stored from wreg
   504  007E00  6E0B               	movwf	Left@chords^0,c
   505  007E02                     
   506                           ;main.c: 199:     bool done = 0;
   507  007E02  0E00               	movlw	0
   508  007E04  6E08               	movwf	Left@done^0,c
   509  007E06                     
   510                           ;main.c: 200:     bool S1A_old = RD0;
   511  007E06  0E00               	movlw	0
   512  007E08  B083               	btfsc	3971,0,c	;volatile
   513  007E0A  0E01               	movlw	1
   514  007E0C  6E09               	movwf	Left@S1A_old^0,c
   515  007E0E                     
   516                           ;main.c: 201:     bool S1B_old = RD1;
   517  007E0E  0E00               	movlw	0
   518  007E10  B283               	btfsc	3971,1,c	;volatile
   519  007E12  0E01               	movlw	1
   520  007E14  6E0A               	movwf	Left@S1B_old^0,c
   521  007E16                     
   522                           ;main.c: 203:     int initial_xa = xa;
   523  007E16  C00E  F004         	movff	_xa,Left@initial_xa
   524  007E1A  C00F  F005         	movff	_xa+1,Left@initial_xa+1
   525  007E1E                     
   526                           ;main.c: 204:     int initial_xb = xb;
   527  007E1E  C00C  F006         	movff	_xb,Left@initial_xb
   528  007E22  C00D  F007         	movff	_xb+1,Left@initial_xb+1
   529  007E26                     
   530                           ;main.c: 206:     RB1 = 1;
   531  007E26  8281               	bsf	3969,1,c	;volatile
   532  007E28                     
   533                           ;main.c: 207:     RB0 = 0;
   534  007E28  9081               	bcf	3969,0,c	;volatile
   535  007E2A                     
   536                           ;main.c: 208:     RB2 = 1;
   537  007E2A  8481               	bsf	3969,2,c	;volatile
   538  007E2C                     
   539                           ;main.c: 210:     RB4 = 1;
   540  007E2C  8881               	bsf	3969,4,c	;volatile
   541  007E2E                     
   542                           ;main.c: 211:     RB3 = 1;
   543  007E2E  8681               	bsf	3969,3,c	;volatile
   544  007E30                     
   545                           ;main.c: 212:     RB5 = 0;
   546  007E30  9A81               	bcf	3969,5,c	;volatile
   547                           
   548                           ;main.c: 214:     while (!done) {
   549  007E32  EF71  F03F         	goto	l83
   550  007E36                     l909:
   551                           
   552                           ;main.c: 217:         if (RD0 != S1A_old){
   553  007E36  0E00               	movlw	0
   554  007E38  B083               	btfsc	3971,0,c	;volatile
   555  007E3A  0E01               	movlw	1
   556  007E3C  1809               	xorwf	Left@S1A_old^0,w,c
   557  007E3E  B4D8               	btfsc	status,2,c
   558  007E40  EF24  F03F         	goto	u161
   559  007E44  EF26  F03F         	goto	u160
   560  007E48                     u161:
   561  007E48  EF2C  F03F         	goto	l915
   562  007E4C                     u160:
   563  007E4C                     
   564                           ;main.c: 218:             xa++;
   565  007E4C  4A0E               	infsnz	_xa^0,f,c
   566  007E4E  2A0F               	incf	(_xa+1)^0,f,c
   567  007E50                     
   568                           ;main.c: 219:             S1A_old = RD0;
   569  007E50  0E00               	movlw	0
   570  007E52  B083               	btfsc	3971,0,c	;volatile
   571  007E54  0E01               	movlw	1
   572  007E56  6E09               	movwf	Left@S1A_old^0,c
   573  007E58                     l915:
   574                           
   575                           ;main.c: 222:         if (RD1 != S1B_old){
   576  007E58  0E00               	movlw	0
   577  007E5A  B283               	btfsc	3971,1,c	;volatile
   578  007E5C  0E01               	movlw	1
   579  007E5E  180A               	xorwf	Left@S1B_old^0,w,c
   580  007E60  B4D8               	btfsc	status,2,c
   581  007E62  EF35  F03F         	goto	u171
   582  007E66  EF37  F03F         	goto	u170
   583  007E6A                     u171:
   584  007E6A  EF3D  F03F         	goto	l921
   585  007E6E                     u170:
   586  007E6E                     
   587                           ;main.c: 223:             xb++;
   588  007E6E  4A0C               	infsnz	_xb^0,f,c
   589  007E70  2A0D               	incf	(_xb+1)^0,f,c
   590  007E72                     
   591                           ;main.c: 224:             S1B_old = RD1;
   592  007E72  0E00               	movlw	0
   593  007E74  B283               	btfsc	3971,1,c	;volatile
   594  007E76  0E01               	movlw	1
   595  007E78  6E0A               	movwf	Left@S1B_old^0,c
   596  007E7A                     l921:
   597                           
   598                           ;main.c: 228:         if (xa >= initial_xa + chords * 211 || xb >= initial_xb + chords *
      +                           211){
   599  007E7A  500B               	movf	Left@chords^0,w,c
   600  007E7C  0DD3               	mullw	211
   601  007E7E  CFF3 F001          	movff	prodl,??_Left
   602  007E82  CFF4 F002          	movff	prodh,??_Left+1
   603  007E86  5004               	movf	Left@initial_xa^0,w,c
   604  007E88  2601               	addwf	??_Left^0,f,c
   605  007E8A  5005               	movf	(Left@initial_xa+1)^0,w,c
   606  007E8C  2202               	addwfc	(??_Left+1)^0,f,c
   607  007E8E  5001               	movf	??_Left^0,w,c
   608  007E90  5C0E               	subwf	_xa^0,w,c
   609  007E92  500F               	movf	(_xa+1)^0,w,c
   610  007E94  0A80               	xorlw	128
   611  007E96  6E03               	movwf	(??_Left+2)^0,c
   612  007E98  5002               	movf	(??_Left+1)^0,w,c
   613  007E9A  0A80               	xorlw	128
   614  007E9C  5803               	subwfb	(??_Left+2)^0,w,c
   615  007E9E  B0D8               	btfsc	status,0,c
   616  007EA0  EF54  F03F         	goto	u181
   617  007EA4  EF56  F03F         	goto	u180
   618  007EA8                     u181:
   619  007EA8  EF6F  F03F         	goto	l925
   620  007EAC                     u180:
   621  007EAC  500B               	movf	Left@chords^0,w,c
   622  007EAE  0DD3               	mullw	211
   623  007EB0  CFF3 F001          	movff	prodl,??_Left
   624  007EB4  CFF4 F002          	movff	prodh,??_Left+1
   625  007EB8  5006               	movf	Left@initial_xb^0,w,c
   626  007EBA  2601               	addwf	??_Left^0,f,c
   627  007EBC  5007               	movf	(Left@initial_xb+1)^0,w,c
   628  007EBE  2202               	addwfc	(??_Left+1)^0,f,c
   629  007EC0  5001               	movf	??_Left^0,w,c
   630  007EC2  5C0C               	subwf	_xb^0,w,c
   631  007EC4  500D               	movf	(_xb+1)^0,w,c
   632  007EC6  0A80               	xorlw	128
   633  007EC8  6E03               	movwf	(??_Left+2)^0,c
   634  007ECA  5002               	movf	(??_Left+1)^0,w,c
   635  007ECC  0A80               	xorlw	128
   636  007ECE  5803               	subwfb	(??_Left+2)^0,w,c
   637  007ED0  A0D8               	btfss	status,0,c
   638  007ED2  EF6D  F03F         	goto	u191
   639  007ED6  EF6F  F03F         	goto	u190
   640  007EDA                     u191:
   641  007EDA  EF71  F03F         	goto	l83
   642  007EDE                     u190:
   643  007EDE                     l925:
   644                           
   645                           ;main.c: 229:             done = 1;
   646  007EDE  0E01               	movlw	1
   647  007EE0  6E08               	movwf	Left@done^0,c
   648  007EE2                     l83:
   649                           
   650                           ;main.c: 214:     while (!done) {
   651  007EE2  5008               	movf	Left@done^0,w,c
   652  007EE4  B4D8               	btfsc	status,2,c
   653  007EE6  EF77  F03F         	goto	u201
   654  007EEA  EF79  F03F         	goto	u200
   655  007EEE                     u201:
   656  007EEE  EF1B  F03F         	goto	l909
   657  007EF2                     u200:
   658  007EF2                     
   659                           ;main.c: 235:     RB1 = 1;
   660  007EF2  8281               	bsf	3969,1,c	;volatile
   661                           
   662                           ;main.c: 236:     RB0 = 0;
   663  007EF4  9081               	bcf	3969,0,c	;volatile
   664                           
   665                           ;main.c: 237:     RB2 = 0;
   666  007EF6  9481               	bcf	3969,2,c	;volatile
   667                           
   668                           ;main.c: 239:     RB4 = 1;
   669  007EF8  8881               	bsf	3969,4,c	;volatile
   670                           
   671                           ;main.c: 240:     RB3 = 0;
   672  007EFA  9681               	bcf	3969,3,c	;volatile
   673                           
   674                           ;main.c: 241:     RB5 = 0;
   675  007EFC  9A81               	bcf	3969,5,c	;volatile
   676  007EFE  0012               	return		;funcret
   677  007F00                     __end_of_Left:
   678                           	opt callstack 0
   679                           
   680 ;; *************** function _Forward *****************
   681 ;; Defined at:
   682 ;;		line 58 in file "main.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;  chords          1    wreg     unsigned char 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  chords          1   10[COMRAM] unsigned char 
   687 ;;  initial_xb      2    5[COMRAM] int 
   688 ;;  initial_xa      2    3[COMRAM] int 
   689 ;;  S1B_old         1    9[COMRAM] unsigned char 
   690 ;;  S1A_old         1    8[COMRAM] unsigned char 
   691 ;;  done            1    7[COMRAM] unsigned char 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, status,2, status,0, prodl, prodh
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         0       0       0       0       0       0       0       0       0
   702 ;;      Locals:         8       0       0       0       0       0       0       0       0
   703 ;;      Temps:          3       0       0       0       0       0       0       0       0
   704 ;;      Totals:        11       0       0       0       0       0       0       0       0
   705 ;;Total ram usage:       11 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; This function calls:
   708 ;;		Nothing
   709 ;; This function is called by:
   710 ;;		_main
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text3
   715  007D00                     __ptext3:
   716                           	opt callstack 0
   717  007D00                     _Forward:
   718                           	opt callstack 30
   719                           
   720                           ;incstack = 0
   721                           ;Forward@chords stored from wreg
   722  007D00  6E0B               	movwf	Forward@chords^0,c
   723  007D02                     
   724                           ;main.c: 59:     bool done = 0;
   725  007D02  0E00               	movlw	0
   726  007D04  6E08               	movwf	Forward@done^0,c
   727  007D06                     
   728                           ;main.c: 60:     bool S1A_old = RD0;
   729  007D06  0E00               	movlw	0
   730  007D08  B083               	btfsc	3971,0,c	;volatile
   731  007D0A  0E01               	movlw	1
   732  007D0C  6E09               	movwf	Forward@S1A_old^0,c
   733  007D0E                     
   734                           ;main.c: 61:     bool S1B_old = RD1;
   735  007D0E  0E00               	movlw	0
   736  007D10  B283               	btfsc	3971,1,c	;volatile
   737  007D12  0E01               	movlw	1
   738  007D14  6E0A               	movwf	Forward@S1B_old^0,c
   739  007D16                     
   740                           ;main.c: 63:     int initial_xa = xa;
   741  007D16  C00E  F004         	movff	_xa,Forward@initial_xa
   742  007D1A  C00F  F005         	movff	_xa+1,Forward@initial_xa+1
   743  007D1E                     
   744                           ;main.c: 64:     int initial_xb = xb;
   745  007D1E  C00C  F006         	movff	_xb,Forward@initial_xb
   746  007D22  C00D  F007         	movff	_xb+1,Forward@initial_xb+1
   747  007D26                     
   748                           ;main.c: 66:     RB1 = 1;
   749  007D26  8281               	bsf	3969,1,c	;volatile
   750  007D28                     
   751                           ;main.c: 67:     RB0 = 1;
   752  007D28  8081               	bsf	3969,0,c	;volatile
   753  007D2A                     
   754                           ;main.c: 68:     RB2 = 0;
   755  007D2A  9481               	bcf	3969,2,c	;volatile
   756  007D2C                     
   757                           ;main.c: 70:     RB4 = 1;
   758  007D2C  8881               	bsf	3969,4,c	;volatile
   759  007D2E                     
   760                           ;main.c: 71:     RB3 = 1;
   761  007D2E  8681               	bsf	3969,3,c	;volatile
   762  007D30                     
   763                           ;main.c: 72:     RB5 = 0;
   764  007D30  9A81               	bcf	3969,5,c	;volatile
   765                           
   766                           ;main.c: 74:     while (!done) {
   767  007D32  EFF1  F03E         	goto	l50
   768  007D36                     l789:
   769                           
   770                           ;main.c: 77:         if (RD0 != S1A_old){
   771  007D36  0E00               	movlw	0
   772  007D38  B083               	btfsc	3971,0,c	;volatile
   773  007D3A  0E01               	movlw	1
   774  007D3C  1809               	xorwf	Forward@S1A_old^0,w,c
   775  007D3E  B4D8               	btfsc	status,2,c
   776  007D40  EFA4  F03E         	goto	u11
   777  007D44  EFA6  F03E         	goto	u10
   778  007D48                     u11:
   779  007D48  EFAC  F03E         	goto	l795
   780  007D4C                     u10:
   781  007D4C                     
   782                           ;main.c: 78:             xa++;
   783  007D4C  4A0E               	infsnz	_xa^0,f,c
   784  007D4E  2A0F               	incf	(_xa+1)^0,f,c
   785  007D50                     
   786                           ;main.c: 79:             S1A_old = RD0;
   787  007D50  0E00               	movlw	0
   788  007D52  B083               	btfsc	3971,0,c	;volatile
   789  007D54  0E01               	movlw	1
   790  007D56  6E09               	movwf	Forward@S1A_old^0,c
   791  007D58                     l795:
   792                           
   793                           ;main.c: 82:         if (RD1 != S1B_old){
   794  007D58  0E00               	movlw	0
   795  007D5A  B283               	btfsc	3971,1,c	;volatile
   796  007D5C  0E01               	movlw	1
   797  007D5E  180A               	xorwf	Forward@S1B_old^0,w,c
   798  007D60  B4D8               	btfsc	status,2,c
   799  007D62  EFB5  F03E         	goto	u21
   800  007D66  EFB7  F03E         	goto	u20
   801  007D6A                     u21:
   802  007D6A  EFBD  F03E         	goto	l801
   803  007D6E                     u20:
   804  007D6E                     
   805                           ;main.c: 83:             xb++;
   806  007D6E  4A0C               	infsnz	_xb^0,f,c
   807  007D70  2A0D               	incf	(_xb+1)^0,f,c
   808  007D72                     
   809                           ;main.c: 84:             S1B_old = RD1;
   810  007D72  0E00               	movlw	0
   811  007D74  B283               	btfsc	3971,1,c	;volatile
   812  007D76  0E01               	movlw	1
   813  007D78  6E0A               	movwf	Forward@S1B_old^0,c
   814  007D7A                     l801:
   815                           
   816                           ;main.c: 88:         if (xa >= initial_xa + chords * 211 || xb >= initial_xb + chords * 
      +                          211){
   817  007D7A  500B               	movf	Forward@chords^0,w,c
   818  007D7C  0DD3               	mullw	211
   819  007D7E  CFF3 F001          	movff	prodl,??_Forward
   820  007D82  CFF4 F002          	movff	prodh,??_Forward+1
   821  007D86  5004               	movf	Forward@initial_xa^0,w,c
   822  007D88  2601               	addwf	??_Forward^0,f,c
   823  007D8A  5005               	movf	(Forward@initial_xa+1)^0,w,c
   824  007D8C  2202               	addwfc	(??_Forward+1)^0,f,c
   825  007D8E  5001               	movf	??_Forward^0,w,c
   826  007D90  5C0E               	subwf	_xa^0,w,c
   827  007D92  500F               	movf	(_xa+1)^0,w,c
   828  007D94  0A80               	xorlw	128
   829  007D96  6E03               	movwf	(??_Forward+2)^0,c
   830  007D98  5002               	movf	(??_Forward+1)^0,w,c
   831  007D9A  0A80               	xorlw	128
   832  007D9C  5803               	subwfb	(??_Forward+2)^0,w,c
   833  007D9E  B0D8               	btfsc	status,0,c
   834  007DA0  EFD4  F03E         	goto	u31
   835  007DA4  EFD6  F03E         	goto	u30
   836  007DA8                     u31:
   837  007DA8  EFEF  F03E         	goto	l805
   838  007DAC                     u30:
   839  007DAC  500B               	movf	Forward@chords^0,w,c
   840  007DAE  0DD3               	mullw	211
   841  007DB0  CFF3 F001          	movff	prodl,??_Forward
   842  007DB4  CFF4 F002          	movff	prodh,??_Forward+1
   843  007DB8  5006               	movf	Forward@initial_xb^0,w,c
   844  007DBA  2601               	addwf	??_Forward^0,f,c
   845  007DBC  5007               	movf	(Forward@initial_xb+1)^0,w,c
   846  007DBE  2202               	addwfc	(??_Forward+1)^0,f,c
   847  007DC0  5001               	movf	??_Forward^0,w,c
   848  007DC2  5C0C               	subwf	_xb^0,w,c
   849  007DC4  500D               	movf	(_xb+1)^0,w,c
   850  007DC6  0A80               	xorlw	128
   851  007DC8  6E03               	movwf	(??_Forward+2)^0,c
   852  007DCA  5002               	movf	(??_Forward+1)^0,w,c
   853  007DCC  0A80               	xorlw	128
   854  007DCE  5803               	subwfb	(??_Forward+2)^0,w,c
   855  007DD0  A0D8               	btfss	status,0,c
   856  007DD2  EFED  F03E         	goto	u41
   857  007DD6  EFEF  F03E         	goto	u40
   858  007DDA                     u41:
   859  007DDA  EFF1  F03E         	goto	l50
   860  007DDE                     u40:
   861  007DDE                     l805:
   862                           
   863                           ;main.c: 89:             done = 1;
   864  007DDE  0E01               	movlw	1
   865  007DE0  6E08               	movwf	Forward@done^0,c
   866  007DE2                     l50:
   867                           
   868                           ;main.c: 74:     while (!done) {
   869  007DE2  5008               	movf	Forward@done^0,w,c
   870  007DE4  B4D8               	btfsc	status,2,c
   871  007DE6  EFF7  F03E         	goto	u51
   872  007DEA  EFF9  F03E         	goto	u50
   873  007DEE                     u51:
   874  007DEE  EF9B  F03E         	goto	l789
   875  007DF2                     u50:
   876  007DF2                     
   877                           ;main.c: 95:     RB1 = 1;
   878  007DF2  8281               	bsf	3969,1,c	;volatile
   879                           
   880                           ;main.c: 96:     RB0 = 0;
   881  007DF4  9081               	bcf	3969,0,c	;volatile
   882                           
   883                           ;main.c: 97:     RB2 = 0;
   884  007DF6  9481               	bcf	3969,2,c	;volatile
   885                           
   886                           ;main.c: 99:     RB4 = 1;
   887  007DF8  8881               	bsf	3969,4,c	;volatile
   888                           
   889                           ;main.c: 100:     RB3 = 0;
   890  007DFA  9681               	bcf	3969,3,c	;volatile
   891                           
   892                           ;main.c: 101:     RB5 = 0;
   893  007DFC  9A81               	bcf	3969,5,c	;volatile
   894  007DFE  0012               	return		;funcret
   895  007E00                     __end_of_Forward:
   896                           	opt callstack 0
   897                           
   898 ;; *************** function _Backwards *****************
   899 ;; Defined at:
   900 ;;		line 104 in file "main.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  chords          1    wreg     unsigned char 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  chords          1   10[COMRAM] unsigned char 
   905 ;;  initial_xb      2    5[COMRAM] int 
   906 ;;  initial_xa      2    3[COMRAM] int 
   907 ;;  S1B_old         1    9[COMRAM] unsigned char 
   908 ;;  S1A_old         1    8[COMRAM] unsigned char 
   909 ;;  done            1    7[COMRAM] unsigned char 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, status,2, status,0, prodl, prodh
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   919 ;;      Params:         0       0       0       0       0       0       0       0       0
   920 ;;      Locals:         8       0       0       0       0       0       0       0       0
   921 ;;      Temps:          3       0       0       0       0       0       0       0       0
   922 ;;      Totals:        11       0       0       0       0       0       0       0       0
   923 ;;Total ram usage:       11 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text4
   933  007C00                     __ptext4:
   934                           	opt callstack 0
   935  007C00                     _Backwards:
   936                           	opt callstack 30
   937                           
   938                           ;incstack = 0
   939                           ;Backwards@chords stored from wreg
   940  007C00  6E0B               	movwf	Backwards@chords^0,c
   941  007C02                     
   942                           ;main.c: 105:  bool done = 0;
   943  007C02  0E00               	movlw	0
   944  007C04  6E08               	movwf	Backwards@done^0,c
   945  007C06                     
   946                           ;main.c: 106:     bool S1A_old = RD0;
   947  007C06  0E00               	movlw	0
   948  007C08  B083               	btfsc	3971,0,c	;volatile
   949  007C0A  0E01               	movlw	1
   950  007C0C  6E09               	movwf	Backwards@S1A_old^0,c
   951  007C0E                     
   952                           ;main.c: 107:     bool S1B_old = RD1;
   953  007C0E  0E00               	movlw	0
   954  007C10  B283               	btfsc	3971,1,c	;volatile
   955  007C12  0E01               	movlw	1
   956  007C14  6E0A               	movwf	Backwards@S1B_old^0,c
   957  007C16                     
   958                           ;main.c: 109:     int initial_xa = xa;
   959  007C16  C00E  F004         	movff	_xa,Backwards@initial_xa
   960  007C1A  C00F  F005         	movff	_xa+1,Backwards@initial_xa+1
   961  007C1E                     
   962                           ;main.c: 110:     int initial_xb = xb;
   963  007C1E  C00C  F006         	movff	_xb,Backwards@initial_xb
   964  007C22  C00D  F007         	movff	_xb+1,Backwards@initial_xb+1
   965  007C26                     
   966                           ;main.c: 112:     RB1 = 1;
   967  007C26  8281               	bsf	3969,1,c	;volatile
   968  007C28                     
   969                           ;main.c: 113:     RB0 = 0;
   970  007C28  9081               	bcf	3969,0,c	;volatile
   971  007C2A                     
   972                           ;main.c: 114:     RB2 = 1;
   973  007C2A  8481               	bsf	3969,2,c	;volatile
   974  007C2C                     
   975                           ;main.c: 116:     RB4 = 1;
   976  007C2C  8881               	bsf	3969,4,c	;volatile
   977  007C2E                     
   978                           ;main.c: 117:     RB3 = 0;
   979  007C2E  9681               	bcf	3969,3,c	;volatile
   980  007C30                     
   981                           ;main.c: 118:     RB5 = 1;
   982  007C30  8A81               	bsf	3969,5,c	;volatile
   983                           
   984                           ;main.c: 120:     while (!done) {
   985  007C32  EF71  F03E         	goto	l61
   986  007C36                     l829:
   987                           
   988                           ;main.c: 123:         if (RD0 != S1A_old){
   989  007C36  0E00               	movlw	0
   990  007C38  B083               	btfsc	3971,0,c	;volatile
   991  007C3A  0E01               	movlw	1
   992  007C3C  1809               	xorwf	Backwards@S1A_old^0,w,c
   993  007C3E  B4D8               	btfsc	status,2,c
   994  007C40  EF24  F03E         	goto	u61
   995  007C44  EF26  F03E         	goto	u60
   996  007C48                     u61:
   997  007C48  EF2C  F03E         	goto	l835
   998  007C4C                     u60:
   999  007C4C                     
  1000                           ;main.c: 124:             xa++;
  1001  007C4C  4A0E               	infsnz	_xa^0,f,c
  1002  007C4E  2A0F               	incf	(_xa+1)^0,f,c
  1003  007C50                     
  1004                           ;main.c: 125:             S1A_old = RD0;
  1005  007C50  0E00               	movlw	0
  1006  007C52  B083               	btfsc	3971,0,c	;volatile
  1007  007C54  0E01               	movlw	1
  1008  007C56  6E09               	movwf	Backwards@S1A_old^0,c
  1009  007C58                     l835:
  1010                           
  1011                           ;main.c: 128:         if (RD1 != S1B_old){
  1012  007C58  0E00               	movlw	0
  1013  007C5A  B283               	btfsc	3971,1,c	;volatile
  1014  007C5C  0E01               	movlw	1
  1015  007C5E  180A               	xorwf	Backwards@S1B_old^0,w,c
  1016  007C60  B4D8               	btfsc	status,2,c
  1017  007C62  EF35  F03E         	goto	u71
  1018  007C66  EF37  F03E         	goto	u70
  1019  007C6A                     u71:
  1020  007C6A  EF3D  F03E         	goto	l841
  1021  007C6E                     u70:
  1022  007C6E                     
  1023                           ;main.c: 129:             xb++;
  1024  007C6E  4A0C               	infsnz	_xb^0,f,c
  1025  007C70  2A0D               	incf	(_xb+1)^0,f,c
  1026  007C72                     
  1027                           ;main.c: 130:             S1B_old = RD1;
  1028  007C72  0E00               	movlw	0
  1029  007C74  B283               	btfsc	3971,1,c	;volatile
  1030  007C76  0E01               	movlw	1
  1031  007C78  6E0A               	movwf	Backwards@S1B_old^0,c
  1032  007C7A                     l841:
  1033                           
  1034                           ;main.c: 134:         if (xa >= initial_xa + chords * 211 || xb >= initial_xb + chords *
      +                           211){
  1035  007C7A  500B               	movf	Backwards@chords^0,w,c
  1036  007C7C  0DD3               	mullw	211
  1037  007C7E  CFF3 F001          	movff	prodl,??_Backwards
  1038  007C82  CFF4 F002          	movff	prodh,??_Backwards+1
  1039  007C86  5004               	movf	Backwards@initial_xa^0,w,c
  1040  007C88  2601               	addwf	??_Backwards^0,f,c
  1041  007C8A  5005               	movf	(Backwards@initial_xa+1)^0,w,c
  1042  007C8C  2202               	addwfc	(??_Backwards+1)^0,f,c
  1043  007C8E  5001               	movf	??_Backwards^0,w,c
  1044  007C90  5C0E               	subwf	_xa^0,w,c
  1045  007C92  500F               	movf	(_xa+1)^0,w,c
  1046  007C94  0A80               	xorlw	128
  1047  007C96  6E03               	movwf	(??_Backwards+2)^0,c
  1048  007C98  5002               	movf	(??_Backwards+1)^0,w,c
  1049  007C9A  0A80               	xorlw	128
  1050  007C9C  5803               	subwfb	(??_Backwards+2)^0,w,c
  1051  007C9E  B0D8               	btfsc	status,0,c
  1052  007CA0  EF54  F03E         	goto	u81
  1053  007CA4  EF56  F03E         	goto	u80
  1054  007CA8                     u81:
  1055  007CA8  EF6F  F03E         	goto	l845
  1056  007CAC                     u80:
  1057  007CAC  500B               	movf	Backwards@chords^0,w,c
  1058  007CAE  0DD3               	mullw	211
  1059  007CB0  CFF3 F001          	movff	prodl,??_Backwards
  1060  007CB4  CFF4 F002          	movff	prodh,??_Backwards+1
  1061  007CB8  5006               	movf	Backwards@initial_xb^0,w,c
  1062  007CBA  2601               	addwf	??_Backwards^0,f,c
  1063  007CBC  5007               	movf	(Backwards@initial_xb+1)^0,w,c
  1064  007CBE  2202               	addwfc	(??_Backwards+1)^0,f,c
  1065  007CC0  5001               	movf	??_Backwards^0,w,c
  1066  007CC2  5C0C               	subwf	_xb^0,w,c
  1067  007CC4  500D               	movf	(_xb+1)^0,w,c
  1068  007CC6  0A80               	xorlw	128
  1069  007CC8  6E03               	movwf	(??_Backwards+2)^0,c
  1070  007CCA  5002               	movf	(??_Backwards+1)^0,w,c
  1071  007CCC  0A80               	xorlw	128
  1072  007CCE  5803               	subwfb	(??_Backwards+2)^0,w,c
  1073  007CD0  A0D8               	btfss	status,0,c
  1074  007CD2  EF6D  F03E         	goto	u91
  1075  007CD6  EF6F  F03E         	goto	u90
  1076  007CDA                     u91:
  1077  007CDA  EF71  F03E         	goto	l61
  1078  007CDE                     u90:
  1079  007CDE                     l845:
  1080                           
  1081                           ;main.c: 135:             done = 1;
  1082  007CDE  0E01               	movlw	1
  1083  007CE0  6E08               	movwf	Backwards@done^0,c
  1084  007CE2                     l61:
  1085                           
  1086                           ;main.c: 120:     while (!done) {
  1087  007CE2  5008               	movf	Backwards@done^0,w,c
  1088  007CE4  B4D8               	btfsc	status,2,c
  1089  007CE6  EF77  F03E         	goto	u101
  1090  007CEA  EF79  F03E         	goto	u100
  1091  007CEE                     u101:
  1092  007CEE  EF1B  F03E         	goto	l829
  1093  007CF2                     u100:
  1094  007CF2                     
  1095                           ;main.c: 141:     RB1 = 1;
  1096  007CF2  8281               	bsf	3969,1,c	;volatile
  1097                           
  1098                           ;main.c: 142:     RB0 = 0;
  1099  007CF4  9081               	bcf	3969,0,c	;volatile
  1100                           
  1101                           ;main.c: 143:     RB2 = 0;
  1102  007CF6  9481               	bcf	3969,2,c	;volatile
  1103                           
  1104                           ;main.c: 145:     RB4 = 1;
  1105  007CF8  8881               	bsf	3969,4,c	;volatile
  1106                           
  1107                           ;main.c: 146:     RB3 = 0;
  1108  007CFA  9681               	bcf	3969,3,c	;volatile
  1109                           
  1110                           ;main.c: 147:     RB5 = 0;
  1111  007CFC  9A81               	bcf	3969,5,c	;volatile
  1112  007CFE  0012               	return		;funcret
  1113  007D00                     __end_of_Backwards:
  1114                           	opt callstack 0
  1115  0000                     
  1116                           	psect	rparam
  1117  0000                     tosu	equ	0xFFF
  1118                           tosh	equ	0xFFE
  1119                           tosl	equ	0xFFD
  1120                           stkptr	equ	0xFFC
  1121                           pclatu	equ	0xFFB
  1122                           pclath	equ	0xFFA
  1123                           pcl	equ	0xFF9
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           prodh	equ	0xFF4
  1129                           prodl	equ	0xFF3
  1130                           indf0	equ	0xFEF
  1131                           postinc0	equ	0xFEE
  1132                           postdec0	equ	0xFED
  1133                           preinc0	equ	0xFEC
  1134                           plusw0	equ	0xFEB
  1135                           fsr0h	equ	0xFEA
  1136                           fsr0l	equ	0xFE9
  1137                           wreg	equ	0xFE8
  1138                           indf1	equ	0xFE7
  1139                           postinc1	equ	0xFE6
  1140                           postdec1	equ	0xFE5
  1141                           preinc1	equ	0xFE4
  1142                           plusw1	equ	0xFE3
  1143                           fsr1h	equ	0xFE2
  1144                           fsr1l	equ	0xFE1
  1145                           bsr	equ	0xFE0
  1146                           indf2	equ	0xFDF
  1147                           postinc2	equ	0xFDE
  1148                           postdec2	equ	0xFDD
  1149                           preinc2	equ	0xFDC
  1150                           plusw2	equ	0xFDB
  1151                           fsr2h	equ	0xFDA
  1152                           fsr2l	equ	0xFD9
  1153                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Backwards
    _main->_Forward
    _main->_Left
    _main->_Right

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     420
                          _Backwards
                            _Forward
                               _Left
                              _Right
 ---------------------------------------------------------------------------------
 (1) _Right                                               11    11      0     105
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (1) _Left                                                11    11      0     105
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (1) _Forward                                             11    11      0     105
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (1) _Backwards                                           11    11      0     105
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Backwards
   _Forward
   _Left
   _Right

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B       F       1       15.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       F      20        0.0%
DATA                 0      0       F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Nov  9 19:09:48 2019

                     l50 7DE2                       l61 7CE2                       l39 7BFC  
                     l80 7FFE                       l72 7FE2                       l57 7DF2  
                     l58 7DFE                       l90 7EF2                       l91 7EFE  
                     l83 7EE2                       l68 7CF2                       l69 7CFE  
                     l79 7FF2                       u10 7D4C                       u11 7D48  
                     u20 7D6E                       u21 7D6A                       u30 7DAC  
                     u31 7DA8                       u40 7DDE                       u41 7DDA  
                     u50 7DF2                       u51 7DEE                       u60 7C4C  
                     u61 7C48                       u70 7C6E                       u71 7C6A  
                     u80 7CAC                       u81 7CA8                       u90 7CDE  
                     u91 7CDA              __CFG_BOR$ON 000000                       _xa 000E  
                     _xb 000C              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l801 7D7A                      l811 7C0E                      l803 7DAC  
                    l821 7C2A                      l813 7C16                      l805 7DDE  
                    l901 7E2A                      l831 7C4C                      l823 7C2C  
                    l815 7C1E                      l807 7C02                      l911 7E4C  
                    l903 7E2C                      l841 7C7A                      l833 7C50  
                    l825 7C2E                      l817 7C26                      l809 7C06  
                    l921 7E7A                      l913 7E50                      l905 7E2E  
                    l843 7CAC                      l835 7C58                      l827 7C30  
                    l819 7C28                      l771 7D0E                      l923 7EAC  
                    l915 7E58                      l907 7E30                      l851 7F0E  
                    l931 7BEA                      l845 7CDE                      l837 7C6E  
                    l829 7C36                      l781 7D2A                      l773 7D16  
                    l925 7EDE                      l917 7E6E                      l909 7E36  
                    l861 7F2A                      l853 7F16                      l933 7BF0  
                    l839 7C72                      l791 7D4C                      l783 7D2C  
                    l775 7D1E                      l767 7D02                      l919 7E72  
                    l871 7F4C                      l863 7F2C                      l855 7F1E  
                    l847 7F02                      l935 7BF6                      l927 7BD8  
                    l793 7D50                      l785 7D2E                      l777 7D26  
                    l769 7D06                      l881 7F7A                      l873 7F50  
                    l865 7F2E                      l857 7F26                      l849 7F06  
                    l929 7BE4                      l795 7D58                      l787 7D30  
                    l779 7D28                      l891 7E0E                      l883 7FAC  
                    l875 7F58                      l867 7F30                      l859 7F28  
                    l797 7D6E                      l789 7D36                      l893 7E16  
                    l885 7FDE                      l877 7F6E                      l869 7F36  
                    l799 7D72                      l895 7E1E                      l887 7E02  
                    l879 7F72                      l897 7E26                      l889 7E06  
                    l899 7E28             __CFG_CPB$OFF 000000                      _RB0 007C08  
                    _RB1 007C09                      _RB2 007C0A                      _RB3 007C0B  
                    _RD0 007C18                      _RB4 007C0C                      _RD1 007C19  
                    _RB5 007C0D                      u100 7CF2                      u101 7CEE  
                    u110 7F4C                      u111 7F48                      u200 7EF2  
                    u120 7F6E                      u201 7EEE                      u121 7F6A  
                    u130 7FAC                      u131 7FA8                      u140 7FDE  
                    u141 7FDA                      u150 7FF2                      u151 7FEE  
                    u160 7E4C                      u161 7E48                      u170 7E6E  
                    u171 7E6A                      u180 7EAC                      u181 7EA8  
                    u190 7EDE                      u191 7EDA             __CFG_CPD$OFF 000000  
      Forward@initial_xa 0004        Forward@initial_xb 0006             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _Left 7E00                     _main 7BD8  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000           Forward@S1A_old 0009           Forward@S1B_old 000A  
           ___param_bank 000000          __end_of_Forward 7E00            __CFG_PLLDIV$1 000000  
                  ?_Left 0001           __CFG_CCP2MX$ON 000000                    ?_main 0001  
          __CFG_USBDIV$1 000000                    _TRISB 000F93                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
                  _Right 7F00           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  status 000FD8           __CFG_ICPRT$OFF 000000       __size_of_Backwards 0100  
         __CFG_MCLRE$OFF 000000             __end_of_Left 7F00          __initialization 7BCA  
           __end_of_main 7C00              Forward@done 0008                   ??_Left 0001  
                 ??_main 000C          Backwards@chords 000B            __activetblptr 000000  
                 ?_Right 0001                   _OSCCON 000FD3                ??_Forward 0001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000        __end_of_Backwards 7D00  
       Backwards@S1A_old 0009         Backwards@S1B_old 000A               __accesstop 0060  
__end_of__initialization 7BD2          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_Right 8000              Right@chords 000B  
                ??_Right 0001          __CFG_VREGEN$OFF 000000                  _Forward 7D00  
                __Hparam 0000                  __Lparam 0000                  __pcinit 7BCA  
                __ramtop 0800                  __ptext0 7BD8                  __ptext1 7F00  
                __ptext2 7E00                  __ptext3 7D00                  __ptext4 7C00  
   end_of_initialization 7BD2                _Backwards 7C00      Backwards@initial_xa 0004  
    Backwards@initial_xb 0006             Right@S1A_old 0009             Right@S1B_old 000A  
          Backwards@done 0008            Forward@chords 000B      start_initialization 7BCA  
              Right@done 0008               ?_Backwards 0001         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 000C                 ?_Forward 0001          Right@initial_xa 0004  
        Right@initial_xb 0006           __size_of_Right 0100              ??_Backwards 0001  
       __CFG_WDTPS$32768 000000                 Left@done 0008                 __Hrparam 0000  
       __size_of_Forward 0100                 __Lrparam 0000            __size_of_Left 0100  
          __size_of_main 0028    __CFG_CPUDIV$OSC1_PLL2 000000              Left@S1A_old 0009  
            Left@S1B_old 000A      __CFG_FOSC$INTOSC_EC 000000           Left@initial_xa 0004  
         Left@initial_xb 0006               Left@chords 000B  
